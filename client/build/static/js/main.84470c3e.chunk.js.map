{"version":3,"sources":["Components/Loaders/Preloader.tsx","Components/Errors/ErrorBoundary.tsx","Components/Loaders/Lazy.tsx","Components/Errors/NotFound.tsx","Routes/RenderPrivateRoutes.tsx","Routes/RenderPublicRoutes.tsx","Routes/Routes.tsx","App.tsx","serviceWorkerRegistration.ts","startup/apollo/index.ts","index.tsx","assets/logo.svg","graphql/queries/me.ts","context/UserContext.tsx"],"names":["Preloader","className","src","Logo","alt","width","ErrorBoundary","props","state","hasError","error","errorInfo","console","this","children","Component","Lazy","style","padding","height","marginTop","display","overflow","marginRight","position","marginLeft","marginBottom","textAlign","justifyContent","margin","NotFound","fontWeight","fontSize","lineHeight","color","to","Main","lazy","Profile","RenderPrivateRoutes","exact","path","fallback","component","Login","Registration","RenderPublicRoutes","Routes","me","useQuery","ME_QUERY","data","UserContext","Provider","value","toastSettings","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","httpLink","HttpLink","uri","headers","authorization","localStorage","getItem","offlineLink","OfflineLink","storage","cache","InMemoryCache","client","ApolloClient","link","ApolloLink","from","defaultOptions","watchQuery","fetchPolicy","errorPolicy","query","mutate","persistCache","LocalStorageWrapper","maxSize","debug","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","gql","createContext"],"mappings":"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","file":"static/js/main.84470c3e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport Logo from \"../../assets/logo.svg\";\r\n\r\nconst Preloader: React.FC = () => {\r\n  return (\r\n    <div className=\"center-wrapper\">\r\n      <div className=\"wrap\">\r\n        <img src={Logo} alt=\"logo\" width={200} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Preloader;\r\n","import React, { Component } from \"react\";\r\nimport Preloader from \"../Loaders/Preloader\";\r\n\r\ninterface Props {}\r\ninterface State {\r\n  hasError: Boolean;\r\n}\r\n\r\nclass ErrorBoundary extends Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  static getDerivedStateFromError() {\r\n    return { hasError: true };\r\n  }\r\n\r\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\r\n    console.error(error, errorInfo);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <Preloader />;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React from \"react\";\r\n\r\nimport Skeleton from \"react-loading-skeleton\";\r\n\r\nconst Lazy: React.FC = () => {\r\n  return (\r\n    <div style={{ padding: \"20px 0px 20px 20px\" }}>\r\n      <Skeleton width={214} height={26} />\r\n\r\n      <div style={{ marginTop: 30, display: \"flex\", overflow: \"hidden\" }}>\r\n        <Skeleton width={165} height={34} style={{ marginRight: 8 }} />\r\n        <Skeleton width={105} height={34} style={{ marginRight: 8 }} />\r\n        <Skeleton width={105} height={34} />\r\n      </div>\r\n\r\n      <Skeleton width={165} height={26} style={{ marginTop: 27 }} />\r\n      <div style={{ position: \"relative\", overflow: \"hidden\" }}>\r\n        <Skeleton style={{ marginTop: 8 }} width={288} height={452} />\r\n        <span\r\n          style={{\r\n            position: \"absolute\",\r\n            marginLeft: 7,\r\n          }}\r\n        >\r\n          <Skeleton width={164} height={26} style={{ marginBottom: 10 }} />\r\n          <Skeleton width={164} height={394} />\r\n        </span>\r\n      </div>\r\n\r\n      <div style={{ marginTop: 24, marginRight: 20, textAlign: \"center\" }}>\r\n        <Skeleton width={165} height={34} />\r\n      </div>\r\n      <div\r\n        style={{\r\n          marginTop: 20,\r\n          marginRight: 20,\r\n          justifyContent: \"center\",\r\n          display: \"flex\",\r\n        }}\r\n      >\r\n        <Skeleton width={71} height={53} />\r\n        <Skeleton width={71} height={53} style={{ margin: \"0 25px\" }} />\r\n        <Skeleton width={71} height={53} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Lazy;\r\n","import React from \"react\";\r\n\r\nimport { NavLink } from \"react-router-dom\";\r\nimport Logo from \"../../assets/logo.svg\";\r\n\r\nconst NotFound: React.FC = () => {\r\n  return (\r\n    <div className=\"center-wrapper\">\r\n      <div className=\"wrap\">\r\n        <img src={Logo} alt=\"logo\" width={200} />\r\n\r\n        <p\r\n          style={{\r\n            fontWeight: 700,\r\n            fontSize: 24,\r\n            lineHeight: \"29.26px\",\r\n            color: \"#5b5b5b\",\r\n          }}\r\n        >\r\n          Ошибка\r\n        </p>\r\n\r\n        <p\r\n          style={{\r\n            fontWeight: 700,\r\n            fontSize: 80,\r\n            lineHeight: \"97.52px\",\r\n            color: \"#5b5b5b\",\r\n            marginTop: 5,\r\n          }}\r\n        >\r\n          404\r\n        </p>\r\n\r\n        <p\r\n          style={{\r\n            fontWeight: 600,\r\n            fontSize: 14,\r\n            lineHeight: \"23.8px\",\r\n            color: \"#5b5b5b\",\r\n          }}\r\n        >\r\n          Что-то пошло не так, данная страница не найдена!\r\n        </p>\r\n\r\n        <NavLink to=\"/\">\r\n          <button className=\"btn\" style={{ marginTop: 28 }}>\r\n            Вернуться на главную\r\n          </button>\r\n        </NavLink>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import React, { Suspense, lazy } from \"react\";\r\n\r\nimport { Switch, Route } from \"react-router-dom\";\r\n\r\nimport Lazy from \"../Components/Loaders/Lazy\";\r\nimport NotFound from \"../Components/Errors/NotFound\";\r\nconst Main = lazy(() => import(\"../Pages/Main\"));\r\nconst Profile = lazy(() => import(\"../Pages/Profile\"));\r\n\r\nconst RenderPrivateRoutes: React.FC = () => {\r\n  return (\r\n    <Switch>\r\n      <Route exact path=\"/\">\r\n        <Suspense fallback={<Lazy />}>\r\n          <Main />\r\n        </Suspense>\r\n      </Route>\r\n      <Route path=\"/profile\" component={Profile} />\r\n      <Route path=\"*\" component={NotFound} />\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default RenderPrivateRoutes;\r\n","import React, { lazy } from \"react\";\r\n\r\nimport { Switch, Route } from \"react-router-dom\";\r\n\r\nimport NotFound from \"../Components/Errors/NotFound\";\r\nconst Login = lazy(() => import(\"../Pages/Login\"));\r\nconst Registration = lazy(() => import(\"../Pages/Registration\"));\r\n\r\nconst RenderPublicRoutes: React.FC = () => {\r\n  return (\r\n    <Switch>\r\n      <Route exact path=\"/\" component={Login} />\r\n      <Route path=\"/registration\" component={Registration} />\r\n      <Route path=\"*\" component={NotFound} />\r\n    </Switch>\r\n  );\r\n};\r\n\r\nexport default RenderPublicRoutes;\r\n","import React, { Suspense } from \"react\";\r\n\r\nimport { UserContext } from \"../context/UserContext\";\r\n\r\nimport ErrorBoundary from \"../Components/Errors/ErrorBoundary\";\r\nimport Preloader from \"../Components/Loaders/Preloader\";\r\n\r\nimport { QueryResult, useQuery } from \"@apollo/react-hooks\";\r\nimport ME_QUERY from \"../graphql/queries/me\";\r\n\r\nimport RenderPrivateRoutes from \"./RenderPrivateRoutes\";\r\nimport RenderPublicRoutes from \"./RenderPublicRoutes\";\r\n\r\nconst Routes: React.FC = () => {\r\n  const { data }: QueryResult = useQuery(ME_QUERY);\r\n\r\n  const { me } = data || {};\r\n\r\n  return (\r\n    <ErrorBoundary>\r\n      <Suspense fallback={<Preloader />}>\r\n        <UserContext.Provider value={me}>\r\n          {me ? <RenderPrivateRoutes /> : <RenderPublicRoutes />}\r\n        </UserContext.Provider>\r\n      </Suspense>\r\n    </ErrorBoundary>\r\n  );\r\n};\r\n\r\nexport default Routes;\r\n","import React, { Fragment } from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport Routes from \"./Routes/Routes\";\r\n\r\nimport { ToastContainer, ToastContainerProps } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst toastSettings: ToastContainerProps = {\r\n  position: \"bottom-center\",\r\n  autoClose: 5000,\r\n  hideProgressBar: true,\r\n  newestOnTop: true,\r\n  closeOnClick: true,\r\n  rtl: false,\r\n  pauseOnFocusLoss: true,\r\n  draggable: true,\r\n  pauseOnHover: true,\r\n};\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <Fragment>\r\n      <Router>\r\n        <Routes />\r\n      </Router>\r\n      <ToastContainer {...toastSettings} />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import OfflineLink from \"apollo-link-offline\";\r\nimport {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  NormalizedCacheObject,\r\n  HttpLink,\r\n  ApolloLink,\r\n} from \"@apollo/client\";\r\n\r\nconst httpLink = new HttpLink({\r\n  uri: \"/graphql\",\r\n  headers: {\r\n    authorization: localStorage.getItem(\"token\"),\r\n  },\r\n});\r\n\r\nconst offlineLink = new OfflineLink({\r\n  storage: localStorage,\r\n});\r\n\r\nexport const cache: InMemoryCache = new InMemoryCache();\r\n\r\nexport const client: ApolloClient<NormalizedCacheObject> = new ApolloClient<NormalizedCacheObject>(\r\n  {\r\n    link: ApolloLink.from([offlineLink, httpLink]),\r\n    cache,\r\n    defaultOptions: {\r\n      watchQuery: {\r\n        fetchPolicy: \"cache-and-network\",\r\n        errorPolicy: \"all\",\r\n      },\r\n      query: {\r\n        fetchPolicy: \"cache-first\",\r\n        errorPolicy: \"all\",\r\n      },\r\n      mutate: {\r\n        errorPolicy: \"all\",\r\n      },\r\n    },\r\n  }\r\n);\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\r\n\r\nimport { persistCache, LocalStorageWrapper } from \"apollo3-cache-persist\";\r\nimport { ApolloProvider } from \"@apollo/react-hooks\";\r\nimport { cache, client } from \"./startup/apollo\";\r\n\r\npersistCache({\r\n  cache,\r\n  storage: new LocalStorageWrapper(localStorage),\r\n  maxSize: false,\r\n  debug: false,\r\n}).then(() => {\r\n  ReactDOM.render(\r\n    <React.StrictMode>\r\n      <ApolloProvider client={client}>\r\n        <App />\r\n      </ApolloProvider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n  );\r\n});\r\n\r\nserviceWorkerRegistration.register();\r\n","export default __webpack_public_path__ + \"static/media/logo.30296705.svg\";","import { gql, DocumentNode } from \"@apollo/client\";\r\n\r\nconst ME_QUERY: DocumentNode = gql`\r\n  query me {\r\n    me {\r\n      id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport default ME_QUERY;\r\n","import { createContext } from \"react\";\r\n\r\ntype TContext = {\r\n  id: String;\r\n  name: String;\r\n} | null;\r\n\r\nexport const UserContext: React.Context<TContext> = createContext<TContext>(\r\n  null\r\n);\r\n"],"sourceRoot":""}